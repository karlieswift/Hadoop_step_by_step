package com.tay.sparkstreaming.advertisement

import java.sql.{Connection, PreparedStatement}
import java.text.SimpleDateFormat
import java.util.Date

import org.apache.kafka.clients.consumer.{ConsumerConfig, ConsumerRecord}
import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.streaming.dstream.{DStream, InputDStream}
import org.apache.spark.streaming.kafka010.{ConsumerStrategies, KafkaUtils, LocationStrategies}

/**
 * @author karlieswift 
 *         date: 2020/7/24 10:00 
 *         ClassName: LastOneHourClick  
 * @version java "13.0.1"
 *
 *          需求三：最近一小时广告点击量（这里改为最近一分钟，每隔10秒查看计算）
 *
 *         思路分析
 *          1）开窗确定时间范围；
 *          2）在窗口内将数据转换数据结构为((adid,hm),count);
 *          3）按照广告id进行分组处理，组内按照时分排序。
 */
object LastOneHourClick {
  def main(args: Array[String]): Unit = {

    val conf: SparkConf = new SparkConf().setMaster("local[*]").setAppName("adclick")

    val ssc = new StreamingContext(conf, Seconds(5))
    // kakfa一般用于实时数据传输，所以在sparkstreaming传输
    //定义Kafka参数
    val kafkaPara: Map[String, Object] = Map[String, Object](
      ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG -> "hadoop7:9092,hadoop8:9092,hadoop9:9092", //集群配置
      ConsumerConfig.GROUP_ID_CONFIG -> "tay", //消费者组的组名
      "key.deserializer" -> "org.apache.kafka.common.serialization.StringDeserializer",
      "value.deserializer" -> "org.apache.kafka.common.serialization.StringDeserializer"
    )
    //使用kakfa的工具类,来访问kafka,传递Topic和连接配置
    val kafkastreaming: InputDStream[ConsumerRecord[String, String]] = KafkaUtils.createDirectStream(
      ssc,
      LocationStrategies.PreferConsistent, //位置策略 Use this only if your executors are on the same nodes as your Kafka brokers.
      ConsumerStrategies.Subscribe[String, String](Set("sparkstreaming"), kafkaPara) //kafka的配置
    )


    //todo 1-拿到的kafka的数据,封装类
    val value: DStream[AdsClicks] = kafkastreaming.map(
      lines => {
        val datas: Array[String] = lines.value().split(" ")
        //todo 1-读取kafka的数据，将数据转换为类进行操作
        (AdsClicks(datas(0), datas(1), datas(2), datas(3), datas(4)))
      }
    )


    val value1: DStream[((Long, String), Int)] = value.map(
      datas => {
        ((datas.time.toLong / 10000 * 10000, datas.adid), 1)
      }
    )
    val value2: DStream[((Long, String), Int)] = value1.reduceByKeyAndWindow(
      (i: Int, j: Int) => i + j,
      Seconds(60),
      Seconds(10)
    )
    val format = new SimpleDateFormat("hh:mm:ss")
    val value3: DStream[(String, Iterable[(String, Int)])] = value2.map {
      case (k, v) => {
        val date = new Date(k._1)
        (k._2, (format.format(date), v))
      }
    }.groupByKey()

    val value4: DStream[(String, List[(String, Int)])] = value3.mapValues(
      datas => {
        datas.toList.sortWith {
          (left, right) => {
            left._1 < right._1
          }
        }
      }
    )

    value4.print()

    ssc.start()
    ssc.awaitTermination()


  }

  case class AdsClicks(time: String, area: String, city: String, userid: String, adid: String)

}
/**
 * 结果：
 * -------------------------------------------
 * Time: 1595562190000 ms
 * -------------------------------------------
 * (1,List((11:40:50,6), (11:41:00,10), (11:43:00,18)))
 * (2,List((11:40:50,18), (11:41:00,10), (11:43:00,17)))
 * (3,List((11:40:50,9), (11:41:00,12), (11:43:00,27)))
 * (4,List((11:40:50,14), (11:41:00,11), (11:43:00,23)))
 * (5,List((11:40:50,14), (11:41:00,10), (11:43:00,22)))
 * (6,List((11:40:50,5), (11:41:00,8), (11:43:00,13)))
 *
 * -------------------------------------------
 * Time: 1595562200000 ms
 * -------------------------------------------
 * (1,List((11:40:50,6), (11:41:00,10), (11:43:00,18), (11:43:10,29)))
 * (2,List((11:40:50,18), (11:41:00,10), (11:43:00,17), (11:43:10,23)))
 * (3,List((11:40:50,9), (11:41:00,12), (11:43:00,27), (11:43:10,23)))
 * (4,List((11:40:50,14), (11:41:00,11), (11:43:00,23), (11:43:10,24)))
 * (5,List((11:40:50,14), (11:41:00,10), (11:43:00,22), (11:43:10,34)))
 * (6,List((11:40:50,5), (11:41:00,8), (11:43:00,13), (11:43:10,30)))
 *
 * -------------------------------------------
 * Time: 1595562210000 ms
 * -------------------------------------------
 * (1,List((11:40:50,6), (11:41:00,10), (11:43:00,18), (11:43:10,29), (11:43:20,14)))
 * (2,List((11:40:50,18), (11:41:00,10), (11:43:00,17), (11:43:10,23), (11:43:20,22)))
 * (3,List((11:40:50,9), (11:41:00,12), (11:43:00,27), (11:43:10,23), (11:43:20,15)))
 * (4,List((11:40:50,14), (11:41:00,11), (11:43:00,23), (11:43:10,24), (11:43:20,13)))
 * (5,List((11:40:50,14), (11:41:00,10), (11:43:00,22), (11:43:10,34), (11:43:20,22)))
 * (6,List((11:40:50,5), (11:41:00,8), (11:43:00,13), (11:43:10,30), (11:43:20,16)))
 *
 * -------------------------------------------
 * Time: 1595562220000 ms
 * -------------------------------------------
 * (1,List((11:40:50,6), (11:41:00,10), (11:43:00,18), (11:43:10,29), (11:43:20,14), (11:43:30,16)))
 * (2,List((11:40:50,18), (11:41:00,10), (11:43:00,17), (11:43:10,23), (11:43:20,22), (11:43:30,26)))
 * (3,List((11:40:50,9), (11:41:00,12), (11:43:00,27), (11:43:10,23), (11:43:20,15), (11:43:30,12)))
 * (4,List((11:40:50,14), (11:41:00,11), (11:43:00,23), (11:43:10,24), (11:43:20,13), (11:43:30,17)))
 * (5,List((11:40:50,14), (11:41:00,10), (11:43:00,22), (11:43:10,34), (11:43:20,22), (11:43:30,12)))
 * (6,List((11:40:50,5), (11:41:00,8), (11:43:00,13), (11:43:10,30), (11:43:20,16), (11:43:30,15)))
 *
 * -------------------------------------------
 * Time: 1595562230000 ms
 * -------------------------------------------
 * (1,List((11:40:50,6), (11:41:00,10), (11:43:00,18), (11:43:10,29), (11:43:20,14), (11:43:30,16), (11:43:40,17)))
 * (2,List((11:40:50,18), (11:41:00,10), (11:43:00,17), (11:43:10,23), (11:43:20,22), (11:43:30,26), (11:43:40,22)))
 * (3,List((11:40:50,9), (11:41:00,12), (11:43:00,27), (11:43:10,23), (11:43:20,15), (11:43:30,12), (11:43:40,18)))
 * (4,List((11:40:50,14), (11:41:00,11), (11:43:00,23), (11:43:10,24), (11:43:20,13), (11:43:30,17), (11:43:40,16)))
 * (5,List((11:40:50,14), (11:41:00,10), (11:43:00,22), (11:43:10,34), (11:43:20,22), (11:43:30,12), (11:43:40,18)))
 * (6,List((11:40:50,5), (11:41:00,8), (11:43:00,13), (11:43:10,30), (11:43:20,16), (11:43:30,15), (11:43:40,22)))
 *
 * -------------------------------------------
 * Time: 1595562240000 ms
 * -------------------------------------------
 * (1,List((11:40:50,6), (11:41:00,10), (11:43:00,18), (11:43:10,29), (11:43:20,14), (11:43:30,16), (11:43:40,17), (11:43:50,11)))
 * (2,List((11:40:50,18), (11:41:00,10), (11:43:00,17), (11:43:10,23), (11:43:20,22), (11:43:30,26), (11:43:40,22), (11:43:50,16)))
 * (3,List((11:40:50,9), (11:41:00,12), (11:43:00,27), (11:43:10,23), (11:43:20,15), (11:43:30,12), (11:43:40,18), (11:43:50,8)))
 * (4,List((11:40:50,14), (11:41:00,11), (11:43:00,23), (11:43:10,24), (11:43:20,13), (11:43:30,17), (11:43:40,16), (11:43:50,10)))
 * (5,List((11:40:50,14), (11:41:00,10), (11:43:00,22), (11:43:10,34), (11:43:20,22), (11:43:30,12), (11:43:40,18), (11:43:50,7)))
 * (6,List((11:40:50,5), (11:41:00,8), (11:43:00,13), (11:43:10,30), (11:43:20,16), (11:43:30,15), (11:43:40,22), (11:43:50,7)))
 *
 * -------------------------------------------
 * Time: 1595562250000 ms
 * -------------------------------------------
 * (1,List((11:43:10,29), (11:43:20,14), (11:43:30,16), (11:43:40,17), (11:43:50,11), (11:44:00,9)))
 * (2,List((11:43:10,23), (11:43:20,22), (11:43:30,26), (11:43:40,22), (11:43:50,16), (11:44:00,7)))
 * (3,List((11:43:10,23), (11:43:20,15), (11:43:30,12), (11:43:40,18), (11:43:50,8), (11:44:00,3)))
 * (4,List((11:43:10,24), (11:43:20,13), (11:43:30,17), (11:43:40,16), (11:43:50,10), (11:44:00,14)))
 * (5,List((11:43:10,34), (11:43:20,22), (11:43:30,12), (11:43:40,18), (11:43:50,7), (11:44:00,11)))
 * (6,List((11:43:10,30), (11:43:20,16), (11:43:30,15), (11:43:40,22), (11:43:50,7), (11:44:00,11)))
 */